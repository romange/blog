<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mapreduce on These are the wrong sort of bees</title><link>https://romange.github.io/blog/preview/tags/mapreduce/</link><description>Recent content in mapreduce on These are the wrong sort of bees</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Nov 2019 10:30:12 +0300</lastBuildDate><atom:link href="https://romange.github.io/blog/preview/tags/mapreduce/index.xml" rel="self" type="application/rss+xml"/><item><title>Gaia Mapreduce Tutorial - part2</title><link>https://romange.github.io/blog/preview/2019/11/01/gaia-mapreduce-tutorial-part2/</link><pubDate>Fri, 01 Nov 2019 10:30:12 +0300</pubDate><guid>https://romange.github.io/blog/preview/2019/11/01/gaia-mapreduce-tutorial-part2/</guid><description>&lt;p>In &lt;a href="https://romange.github.io/blog/preview/2019/07/15/gaia-mapreduce-tutorial-part1/">part 1 of my tutorial&lt;/a> I&amp;rsquo;ve explained behind the scenes of a typical mapreduce
framework. In this section we will go over GAIA-MR and will show why it&amp;rsquo;s more efficiant than other open-source frameworks.&lt;/p></description></item><item><title>Benchmarking GAIA MR on Google cloud</title><link>https://romange.github.io/blog/preview/2019/07/25/benchmarking-gaia-mr-on-google-cloud/</link><pubDate>Thu, 25 Jul 2019 11:38:01 +0300</pubDate><guid>https://romange.github.io/blog/preview/2019/07/25/benchmarking-gaia-mr-on-google-cloud/</guid><description>&lt;p>I&amp;rsquo;ve recently had a chance to benchmark GAIA in Google cloud. The goal was to test how quickly I can
process compressed text data (i.e read and uncompress on the fly) when running on a single VM and reading directly from cloud storage. The results were quite surprising.&lt;/p></description></item><item><title>Gaia Mapreduce Tutorial - part1</title><link>https://romange.github.io/blog/preview/2019/07/15/gaia-mapreduce-tutorial-part1/</link><pubDate>Mon, 15 Jul 2019 00:00:35 +0300</pubDate><guid>https://romange.github.io/blog/preview/2019/07/15/gaia-mapreduce-tutorial-part1/</guid><description>&lt;p>There are many Java-based mapreduce frameworks that exist today -
Apache &lt;a href="https://beam.apache.org/">Beam&lt;/a>, &lt;a href="https://flink.apache.org/">Flink&lt;/a>, &lt;a href="https://apex.apache.org/">Apex&lt;/a> are to name few.&lt;/p>
&lt;p>&lt;a href="https://github.com/romange/gaia">GAIA-MR&lt;/a> is my attempt to show advantages of a C++ over other languages in this domain.
It&amp;rsquo;s currently implemented for a single machine but even with this restriction I&amp;rsquo;ve seen
up-to 3-7 times reduction in cost and running time vs current alternatives.&lt;/p>
&lt;p>Please note that the single machine restriction put a hard limit on how much data we can process, nethertheless GAIA-MR shines with small-to-medium size workloads (~1TB). This part gives an introduction about mapreduce in general.&lt;/p></description></item></channel></rss>