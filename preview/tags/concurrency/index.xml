<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concurrency on These are the wrong sort of bees</title><link>https://romange.github.io/blog/preview/tags/concurrency/</link><description>Recent content in concurrency on These are the wrong sort of bees</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Jul 2018 20:45:24 +0300</lastBuildDate><atom:link href="https://romange.github.io/blog/preview/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Seastar - Asynchronous C++ framework</title><link>https://romange.github.io/blog/preview/2018/07/12/seastar-asynchronous-c-framework/</link><pubDate>Thu, 12 Jul 2018 20:45:24 +0300</pubDate><guid>https://romange.github.io/blog/preview/2018/07/12/seastar-asynchronous-c-framework/</guid><description>&lt;p>Lately, there are many discussions in the programming community in general and in c++ community in particular on how to write efficient asynchronous code. Many concepts like futures, continuations, coroutines are being discussed by c++ standard
committee but not much progress was made besides very minimal support of C++11 futures.&lt;/p>
&lt;p>On the other hand, many mainstream programming languages progressed quicker and adopted asynchronous models
either into a core language or popularized it via standard libraries.
For example, Python (yield) and Lua use coroutines to achieve asynchronisity, java uses continuations and futures, golang and Erlang use green threads, and C and Javascript use callback based actor models.
However, C++ historically lacked the official support for asynchronous programming, which forced
the community to introduce ad-hoc frameworks and libraries that provided this functionality.&lt;/p>
&lt;p>I would like to share my opinion on what I think will be the best direction for asynchronous models in C++ by reviewing two
prominent frameworks: &lt;a href="http://seastar.io/">Seastar&lt;/a> and &lt;a href="https://boost.org/doc/libs/1_67_0/libs/fiber/doc/html/index.html">Boost.Fiber&lt;/a>. This (opinionated) post reviews Seastar.&lt;/p></description></item><item><title>Reloading data structures under high throughput</title><link>https://romange.github.io/blog/preview/2017/09/29/reloading-data-structures-under-high-throughput/</link><pubDate>Fri, 29 Sep 2017 15:46:55 +0300</pubDate><guid>https://romange.github.io/blog/preview/2017/09/29/reloading-data-structures-under-high-throughput/</guid><description>&lt;p>Suppose you have a multi-threaded server that serves tens of thousands read queries per second. Those queries use a shared data-structure or index that is mostly immutable during the server run with the exception of periodic index reloads. How do you implement data reloads in that server while keeping it live and kicking in production?&lt;/p></description></item></channel></rss>