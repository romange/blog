<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fibers on These are the wrong sort of bees</title><link>https://romange.github.io/blog/preview/tags/fibers/</link><description>Recent content in fibers on These are the wrong sort of bees</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Sep 2020 20:30:11 +0300</lastBuildDate><atom:link href="https://romange.github.io/blog/preview/tags/fibers/index.xml" rel="self" type="application/rss+xml"/><item><title>IO_URING powered event-loop with efficient message passing</title><link>https://romange.github.io/blog/preview/2020/09/05/io_uring-powered-event-loop-with-efficient-message-passing/</link><pubDate>Sat, 05 Sep 2020 20:30:11 +0300</pubDate><guid>https://romange.github.io/blog/preview/2020/09/05/io_uring-powered-event-loop-with-efficient-message-passing/</guid><description>&lt;p>IO_URING is the new API that provides an efficient communication channel with the kernel via shared ring-buffer. It has been specially designed for handling all types of Linux I/O requests and it finally unifies file and networking calls into the same API. This article covers an experimental layer in GAIA that allows building an efficient backend server using IO_URING api. This layer shows an order of magnitude better throughput on a single server compared to epoll-based approaches. Also, it demonstrates a flexible inter-thread message passing mechanism specially designed for reactive systems.&lt;/p></description></item><item><title>Introduction to fibers in c++</title><link>https://romange.github.io/blog/preview/2018/12/15/introduction-to-fibers-in-c-/</link><pubDate>Sat, 15 Dec 2018 11:59:52 +0300</pubDate><guid>https://romange.github.io/blog/preview/2018/12/15/introduction-to-fibers-in-c-/</guid><description>In my post about Seastar we&amp;rsquo;ve covered continuations style asynchronous programming. My personal opinion is that this style is hard to work with in C++. In this post I would like to cover alternative, Fiber-based approach. I will use Boost.Fibers library in all my examples.
Fibers, or green threads, or cooperative threads are similar to regular threads but with few important distinctions:
Fibers can not move between system threads and they are usually pinned to a specific thread.</description></item></channel></rss>